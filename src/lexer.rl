
#include <stdio.h>

#include "lexer.h"
#include "grammar.h"
#include "../src/ast.h"

%%{
    # name of a machine
    machine lexer;

    main := |*
        # ignoring widespace
        space+  { };
        # name of a variable
        alnum+
        {
            struct ast_node *token = ast_node_variable(fsm->ts, fsm->te);

            //printf("var: \"%s\"\n", token->token);

            Parse(fsm->parser, VARIABLE, token, root);
        };
        '&&'
        {
            //printf("operator: AND\n");
            Parse(fsm->parser, AND, TOKEN_AND, root);
        };
        '||'
        {
            //printf("operator: OR\n");
            Parse(fsm->parser, OR, TOKEN_OR, root);
        };
        ';'
        {
            //printf("program end\n");
            Parse(fsm->parser, END, NULL, root);
            Parse(fsm->parser, 0, NULL, root);
        };
        '('
        {
            Parse(fsm->parser, P_O, NULL, root);
        };
        ')'
        {
            Parse(fsm->parser, P_C, NULL, root);
        };
    *|;

}%%

// Ragel command: write data
%% write data;

/**
 * The main function of lexical analizer (generated by ragel)
 */
 bool lexer(struct FSM *fsm, struct ast_node **root)
 {
     %% access fsm->;
     %% variable p fsm->p;
     %% variable pe fsm->pe;
     %% variable eof fsm->eof;

     // Ragel command: write init
     %% write init;

     // Ragel command: write exec
     %% write exec;

     return true;
 }

